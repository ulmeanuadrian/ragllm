{"chunk_0":{"metadata":"Source: How to Structure and Organise a Streamlit App.pdf","chunk":"<!-- image -->\n\n## How to Structure and Organise a Streamlit App\n\nBringing Order to a Python Streamlit App Through an Organised Project Folder Structure\n\n<!-- image -->\n\nAndy McDonald \u00b7 Follow\n\nPublished in TDS Archive \u00b7 7 min read \u00b7 Feb 10, 2024\n\n589\n\n2\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nIf you are working with a Python project that extends beyond a few simple scripts and data files, you will know the headaches that can be generated as the project grows. This can result in a cluttered folder consisting of input files, intermediate files mixed together with several Python files and \/ or notebook files, and even project documentation. This can make it hard to find the data or the functions you need when you are looking for it.\n\nYou may want to follow along with the following video.\n\n## Structuring and Organising Streamlit Apps\n\n<!-- image -->\n\nThere are numerous articles out there detailing how to structure Python projects, which are very well-detailed. However, when it comes to Streamlit (one of my favourite Python tools for developing web-based apps very quickly) I had trouble finding information on how best to structure a Streamlit app.\n\nAs a result, I have put together this article to suggest one possible way of structuring your Streamlit app to prevent it from becoming a tangled mess of files.\n\nThe Streamlit App folder structure and the Streamlit cookiecutter template proposed here are not the only ways an app could be structured. There are numerous other factors to consider, such as the type of app you are building and who that app is for. I encourage you to use the suggestions in this article for your own app and adapt it to suit your needs.\n\n## The Starting Point of Creating a Streamlit App\n\nWhen I am starting with Streamlit - especially when I don't fully know what I want to achieve or if I am experimenting - I will often start with a simple directory and a single app.py file.\n\n\n\nThis is great, as we can put all of our code into app.py and then call upon the command streamlit run app.py to start the app in the browser.\n\nThis simple folder and single file can suddenly extend to multiple files as data is gathered from the relevant sources or generated from the main app.py file.\n\nstreamlit\\_app\n\n\u251c\u2500\u2500\n\napp.py\n\n\n\nHowever, there will come a point when the code within app.py starts to become unwieldy, messy and disorganised, and the application folder becomes filled with multiple data files with varying names.\n\n## Creating a Streamlit Project Folder Structure\n\n## Separating Input and Output Data Locations\n\nOnce the app has reached the point where it is no longer a one-off experiment, I will begin adding some structure. Not only does this help with keeping a neat workspace, but it also helps my sanity when finding files later!\n\nThe first step I normally do within the main app directory is to create subdirectories for input data and output data. These will be used to store any files that will be needed for the running of the app and any files generated as a result of any analysis.\n\n\n\nWhen building web-based apps with Streamlit , it is very easy to continuously add sections and functions to app.py one after the other.\n\nVery quickly, this leads to a very large and hard-to-navigate Python file.\n\nOne way to counter this is to split the information into multiple pages. This improves the look and feel of the app, as well as improving the user experience.\n\n\n\nStreamlit has a nice way to handle multiple pages and that is by creating a pages subfolder and placing the .py files in there. I have previously covered this in the following article.\n\nCreating Components For Reusability\n\n<!-- image -->\n\nOnce multiple pages have been created, there may be reusable sections of code that you want to use on more than one page. One way to handle this is to create components . These can include special graphs, widgets and even the sidebar containing key application settings, which can easily be called from multiple places within the app.\n\n<!-- image -->\n\n## Splitting Functional Code from UI Code\n\nFinally, to reduce the size of app.py the key functionality can be extracted (which could include equations, data loading or graph generation) into a source ( src ) subfolder. This allows app.py and any pages to contain only code that will be used to generate key UI functionality and display.\n\n\n\n\n\n## Adding Tests\n\nWhen developing your code or application, you need to ensure that it works as expected, especially if you modify the function.\n\nOne way to ensure that any changes you make to a function or any other functions that it depends on is to write tests around that code.\n\nThere are several Python testing frameworks, such as PyTest and unittest , that are easy to use and even automate as part of a continuous integration workflow.\n\n<!-- image -->\n\n\n\n## Extra Folders: Images, Assets and CSS\n\nAs your Streamlit progresses,"},"chunk_1":{"metadata":"Source: How to Structure and Organise a Streamlit App.pdf","chunk":" there may be a need to include company logos and other relevant images on your pages. These can easily be separated into an assets subfolder and further subdivided into whether they are images or custom css .\n\n<!-- image -->\n\n## Cookiecutter\n\nCreating the above structure manually each time you want to create a new Streamlit App can be tedious and time-consuming - meaning you are more likely to end up with a disorganised folder.\n\nTo help make the process of creating a Streamlit app simpler, we can use a library called cookiecutter . This library allows you to easily create projects based on templates - of which there are many available out there which range from Django apps to standard Python libraries.\n\nBy using cookiecutter , you can recreate a template that includes all of the directories and files mentioned above, including: data\/ , output\/ , pages\/ , src\/ , and even tests\/ . This can be further modified to suit your needs or the requirements for your project.\n\nOnce the template is setup, and you are ready to start a new Streamlit project, it's a simple process of calling upon a single command in your terminal:\n\n\n\nThis will populate your project with all the necessary folders and files for your new Streamlit app.\n\n## Streamlit Cookiecutter Template\n\nWhilst learning about cookiecutter , I thought it would be handy to create my own template, which recreates the structure above. You can access it below, and I am more than happy for people to contribute to and expand.\n\n<!-- image -->\n\nTo use the template, first ensure you have streamlit and cookie-cutter installed.\n\nThen you open up a terminal or command prompt and type the following:\n\n<!-- image -->\n\nThis will then ask you a series of questions, which will help determine which folders and files will be generated.\n\n<!-- image -->\n\nPlease note this is still a work in progress, and I welcome any feedback to help improve the template.\n\n## Creating a Streamlit App Folder Structure Through MacOS Terminal\n\nIf you are working on a Mac, it is possible to do this directly in the terminal using the lines listed below. This will create a series of directories and subdirectories that closely mimic the above folder and file structure.\n\nThese could be stored within your note-taking app and pasted into a terminal window when needed.\n\nThis could also be converted into a bash script to help further automate the process.\n\n\n\n## Summary\n\nEnsuring your Streamlit app is well organised can go a long way to helping you stay sane when developing your app or provide a nice starting point that saves you time by not having to create a new folder structure from scratch. Using cookiecutter templates, like the Streamlit Cookiecutter template can help automate the process and get you off to a better start when creating your app.\n\nIf you like the cookiecutter template or have suggestions for improvements, please feel free to leave a comment or a new case on the GitHub repo.\n\nThanks for reading. Before you go, you should definitely subscribe to my content and get my articles in your inbox. You can do that here! Also, if you have enjoyed this content and want to show your appreciation, consider giving it a few claps.\n\nPython\n\nStreamlit\n\nData Science\n\nData Analysis\n\nStreamlit App\n\n<!-- image -->\n\n## Published in TDS Archive\n\n808K Followers \u00b7 Last published\u00a0Feb 3, 2025\n\nAn archive of data science, data analytics, data engineering, machine learning, and artificial intelligence writing from the former Towards Data Science Medium publication.\n\n## Written by Andy McDonald\n\n11.4K Followers\n\n\u00b7\n\n45 Following\n\n<!-- image -->\n\n<!-- image -->\n\nPetrophysicist and Data Scientist with a passion for data analytics, machine learning, and AI. https:\/ \/andymcdonaldgeo.medium.com\/membership\n\n## Responses (2)\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nWhat are your thoughts?\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nJustin\n\nMar 13, 2024\n\nHow would you handle imports from your pages? You need to put src in the path? I feel like I would have put all py files in the src folder.\n\nReply\n\nPawel Jastrzebski Feb 29, 2024\n\nI've got a deja vu.\n\nSince I've first heard about Streamlit, I keep seeing articles about it cropping up left, right and centre!\n\nBut that's good as it seems like a very useful library.\n\nI haven't had a chance to play with it myself yet but when that\u2026 more\n\nReply\n\n## More from Andy McDonald and TDS Archive\n\n<!-- image -->\n\n<!-- image -->\n\nIn TDS Archive by Andy McDonald\n\n## 7 Steps to Help You Make Your Matplotlib Bar Charts Beautiful\n\nEasily Improve the Quality of Your Matplotlib Data Visualisations With a Few Simple Tweaks\n\n<!-- image -->\n\nMar 27, 2023\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n"},"chunk_2":{"metadata":"Source: How to Structure and Organise a Streamlit App.pdf","chunk":"In TDS Archive by Samuele Mazzanti\n\n## Why 'Statistical Significance' Is Pointless\n\nHere's a better framework for data-driven decision-making\n\n<!-- image -->\n\nDec 1, 2024\n\n1.96K\n\n38\n\n<!-- image -->\n\n<!-- image -->\n\nIn TDS Archive by Shirley Li\n\n## DeepSeek-V3 Explained 1: Multihead Latent Attention\n\nKey architecture innovation behind DeepSeek-V2 and DeepSeek-V3 for faster\u2026\n\nJan 31\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nIn TDS Archive by Andy McDonald\n\n## Working with Well Trajectories in Python\n\nConvert raw well survey data to complete positional data with wellpathpy\n\n<!-- image -->\n\n<!-- image -->\n\nSee all from Andy McDonald\n\nSep 20, 2022\n\n<!-- image -->\n\n<!-- image -->\n\nSee all from TDS Archive\n\n## Recommended from Medium\n\n<!-- image -->\n\n<!-- image -->\n\n- In Level Up Coding by Adam Green\n\n## Hypermodern Python Toolbox 2025\n\nPython tools setting the standard in 2025.\n\nFeb 17\n\n1.5K\n\n19\n\n## Lists\n\n<!-- image -->\n\n<!-- image -->\n\nPredictive Modeling w\/ Python\n\n20 stories \u00b7 1847 saves\n\nPractical Guides to Machine Learning\n\n10 stories \u00b7 2217 saves\n\n<!-- image -->\n\n<!-- image -->\n\nIn Appsilon by Dario Rade \u010d \u0107 i\n\n## Introducing Shiny Assistant - You Can Now Build Shiny Applications\u2026\n\nWe built an entire R Shiny application with Shiny Assistant  -  A GPT model specialized i\u2026\n\n<!-- image -->\n\nSep 16, 2024\n\n64\n\n2\n\n<!-- image -->\n\n<!-- image -->\n\nChatGPT prompts\n\n51 stories \u00b7 2606 saves\n\n<!-- image -->\n\n<!-- image -->\n\nAashish Kumar\n\n## 9 Hidden Gem Python Libraries You Should Know About!\n\nexplore nine lesser-known but powerful Python libraries that can enhance your codin\u2026\n\n<!-- image -->\n\n3d ago\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nIn TDS Archive by Alan Jones\n\n## A Data Dashboard in Pure Python with Taipy\n\nTejaswinikaila\n\n<!-- image -->\n\n<!-- image -->\n\n## dbt: Data Build Tool\n\nIf you're new to dbt, you might have many questions on what dbt is, why dbt, how it\u2026\n\nFeb 12\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nIn Data And Beyond by TONI RAMCHANDANI\n\n<!-- image -->\n\n## Building a Multi-Agent RAG Pipeline with Crew AI\n\nTaipy is an innovative framework designed to simplify the creation of interactive and\u2026\n\nIn today's era of intelligent systems, the ability to combine diverse retrieval tools with robus\u2026\n\n<!-- image -->\n\nJun 25, 2024\n\nFeb 14\n\n865\n\n8\n\n107\n\n1\n\n<!-- image -->\n\nSee more recommendations"}}